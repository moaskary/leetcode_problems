//Runtime 0ms

/*
class Solution {
    public boolean isSubsequence(String s, String t) {
        char[] subString = s.toCharArray();
        char[] actualString = t.toCharArray();

        int sub = 0;
        int actual = 0;
        while(actual < actualString.length && subString.length > 0){
            if(actualString[actual] == subString[sub]){
                sub++;
                actual++;
                if(sub == subString.length){
                    return true;
                }
            }else{
                actual++;
            }
        }
        return (s.isEmpty() || sub == subString.length);
    }
}
*/

//---------------------------------------------------------------------

//Runtime 1ms
/*
class Solution {
    public boolean isSubsequence(String s, String t) {
        // Edge case: if the length of s is greater than the length of t, return false
        if (s.length() > t.length()) {
            return false;
        }

        int sLength = s.length();
        int tLength = t.length();
        int subsequence = 0;

        for (int i = 0; i < tLength; i++) {
            if (subsequence < sLength && s.charAt(subsequence) == t.charAt(i)) {
                // If characters match, increment subsequence
                subsequence++;
            }
        }

        // Check if the entire s is a subsequence of t
        return subsequence == sLength;
    }
}
*/

//---------------------------------------------------------------------

//Runtime 2ms
/*
class Solution {
    public boolean isSubsequence(String s, String t) {
        int i = 0;
        int j = 0;

        while(i < s.length() && j < t.length()){
            if(s.charAt(i) == t.charAt(j)){
                i++;
            }
            j++;
        }
        return i == s.length();
    }
}
*/
