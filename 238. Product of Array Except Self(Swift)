class Solution {
    func productExceptSelf(_ nums: [Int]) -> [Int] {
        let n = nums.count
        var res = Array(repeating: 1 , count: n)

        calLeft(nums, &res)
        calRight(nums, &res)

        return res
    }
    private func calLeft(_ nums: [Int],_ res: inout [Int]){
        var left = 1
        for i in 0..<nums.count{
            res[i] = left
            left *= nums[i]
        }
    }
    private func calRight(_ nums: [Int],_ res: inout [Int]){
        var right = 1
        for i in (0..<nums.count).reversed(){
            res[i] *= right
            right *= nums[i]
        }
    }
}

/*
class Solution {
    func productExceptSelf(_ nums: [Int]) -> [Int] {
        let n = nums.count
        var res = Array(repeating:1 , count: n)

        var left = 1
        for i in 0..<n{
            res[i] = left
            left *= nums[i]
        }

        var right = 1
        for i in (0..<n).reversed(){
            res[i] *= right
            right *= nums[i]
        }
        return res
    }
}
*/
